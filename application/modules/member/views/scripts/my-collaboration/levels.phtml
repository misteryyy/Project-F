<?php 
// The main project navigation
$this->step = 6;
echo $this->partial('my-project/my-project-navigation.phtml',array("step" => $this->step,"project" => $this->project));
?>
<?php 
// The main project navigation
$this->sub_step = 3;
echo $this->partial('my-project-team/my-project-navigation.phtml',array("step" => $this->sub_step,"project" => $this->project));
?>
<div id="alert-area"></div>
<h3>Questions for new people</h3>
	<!-- Form for filtering -->
	<form id="form-question-selection"  class="well form-search" action="#" method="post" >
    	<select name="q" id="q">
    	<?php $al = str_split("12345"); foreach($al as $a){ echo "<option value='$a'>$a</option>";}?>
    	</select>
    	<button type="submit" class="btn">Fetch</button>
    </form>

	<!-- Form for creating new question -->
    <form id="form-create-question" class="well form-search" action="#" method="post" >
    	<input type="text" name="question" class="input-large" />
    	<button type="submit" class="btn">Add New Question</button>
    </form>
    
 	<hr/>   
 	<ol id="question_list">
		<script id="question_list_template" type="text/x-handlebars-template">
				{{#each this}}
					<li data-question_id="{{id}}">
					<form method="get" action="" data-question_id="{{id}}">
						<input type="hidden" name="question_id" value="{{id}}" />
						<input type="text" name="question" value="{{question}}" />
						<input  class="btn btn-success update" type="submit" value="update" name="submit" />
						<input class="btn btn-danger delete" type="submit"  value="delete" name="submit" />
					</form>
					</li>
				{{/each}}
	</script>
	</ol>

	<div id="question_info">
		<script id="question_info_template" type="text/x-handlebars-template">
					<div class="well">
						{{question}} has id {{id}}
					</div>
		</script>
	</div>
		
<script src="http://cloud.github.com/downloads/wycats/handlebars.js/handlebars-1.0.0.beta.6.js"></script>
        <script type="text/javascript"> 
	 		var url = "/member/my-project-team/ajax-question", 
	 		project_id = <?php echo $this->project->id; ?>;
	 		
			var Questions = {

			init: function(config){
				// ajax setup
				$.ajaxSetup({
					url: "/member/my-project-team/ajax-question/id/<?php echo $this->project->id;?>", 
					type: 'POST',
					dataType: 'json',
	 	
				})

				this.config = config;
				this.bindEvents();
				this.setutTemplates();
				this.findQuestions(); // fill the question_list
				},
			// setting template system
			setutTemplates: function(){
				this.config.questionListTemplate = Handlebars.compile(this.config.questionListTemplate);
				this.config.QuestionInfoTemplate = Handlebars.compile(this.config.QuestionInfoTemplate);
			
				},
				
			bindEvents: function(){
				this.config.letterSelection.on('change',this.findQuestions);
				this.config.questionList.on('click','form input.update',this.updateQuestion); // edit question 
				this.config.questionList.on('click','form input.delete',this.deleteQuestion); // delete question
				this.config.formCreate.on('submit',this.createQuestion); // create new question
				
				},
				
			findQuestions: function(){
					var self = Questions;
					//ajax request
					$.ajax({ 
						data: self.config.form.serialize()+"&_method=findAll",
						success: function(results){
							// empty for every cycle
							self.config.questionList.empty();
							console.log(results);
							if(results.data[0]){
								self.config.questionList.append(self.config.questionListTemplate(results.data));
								newAlert (results.respond, results.message)
							}else{
								self.config.questionList.append("Nothing to display.");
								
							}
						}
					});		
	
				},

			// create question
			createQuestion:function(e){
				var self = Questions;
				var form = $(this); // directly this form
				console.log(form);
				//create method
				 $.ajax({
				 	data:  form.serialize() + "&_method=create", // take data from the form and send it to the method delete
				 }).done(
						function (results){
				 			newAlert (results.respond, results.message); // display alert
				 			self.findQuestions(); // refresh questions
				 		}
				 );
				
				 e.preventDefault();
			},	

			// delete question
			deleteQuestion:function(e){
				var self = Questions;
				var form = $(this).parent();
				//console.log($(e.target));
				//console.log($(this).parent());
				//delete method
				$.ajax({
					data:  form.serialize() + "&_method=delete", // take data from the form and send it to the method delete
				}).done(
						function (results){
							newAlert (results.respond, results.message); // display alert
							self.findQuestions(); // refresh questions
						}
				);
				
				e.preventDefault();
			},	

			// update question
			updateQuestion:function(e){
				var self = Questions;
				var form = $(this).parent();


				console.log($(this));
				//delete method
				$.ajax({
					data:  form.serialize() + "&_method=update", // take data from the form and send it to the method update
				}).done(
						function (results){
							newAlert (results.respond, results.message); // display alert
							self.findQuestions(); // refresh questions
						}
				);
				e.preventDefault();
			},	

			};

			Questions.init({
				letterSelection: $('#q'),
				form: $('#question-selelection'),
				formCreate: $('#form-create-question'),
				questionListTemplate: $('#question_list_template').html(),
				questionList: $("#question_list"),
				questionInfo :  $("#question_info"),
				QuestionInfoTemplate :  $("#question_info_template"),

				
			});
		
	 		function newAlert (type, message) {
	 			    $("#alert-area").html($("<div class='alert alert-" + type + " '><a class='close' data-dismiss='alert' href='#'>Ã—</a><p>" + message + " </p></div>"));
	 			   // $(".alert-message").delay(2000).fadeOut("slow", function () { $(this).remove(); });
	 		}    
 </script>  